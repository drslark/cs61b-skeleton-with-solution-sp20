Q: Is one sorting algorithm always faster than another?
A: CountingSorter always tends to be faster than the others, due to its running at a Big Theta bound of Theta(N).

Q: Above we said that BubbleSort, WipingBubbleSort, and InsertionSort each had the same Theta(N^2) asymptotic time complexity. How can you explain the differences in the plots for these three algorithms?
A: The three sorting algorithms, while having the same time complexity, differ when we run different iterations of the experiment due to other factors such as the data they are dealing with and the machine they are being run on.

Q: What information can we gain from empirical analysis of algorithms which might not be as noticeable in asymptotical bounds?
A: We can learn more about the exact timings that each of these algorithms takes given specific data, while the bounds only allow us to predict the general range of their execution time.

Q: For any given sorting algorithm, does increasing the array size always mean the sorting takes longer?
A: No, in some cases, increasing the array size does not necessarily mean that the sorting takes longer, as is displayed by CountingSorter.

Q: How does changing nrepeats change the plot?
A: Increasing nrepeats increases the runtime for a given array size for some algorithms, but other algorithms don't increase as much.

Q: Is your plot the exact same as your partner's plot, even with the same values of ntrials, by, and nrepeats?
A: No, our plots, while similar in shape, do not match up exactly in regards to x and y values.

Q: Optional: Look at the source code for BubbleSorter to WipingBubbleSorter. After looking at the plots, can you intuitively explain why WipingBubbleSorter is usually 2x as fast as BubbleSorter? (Hint: Consider the immobility of some elements when the swapping passes are single directional (i.e. only going forward), and how this "Wiping" strategy helps deal with that issue.) Can you come up with an example that shows the difference in runtime?
A: